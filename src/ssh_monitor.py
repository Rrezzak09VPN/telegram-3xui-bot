#!/usr/bin/env python3

import json
import subprocess
import time
import re
import urllib3
import requests
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
from datetime import datetime
from telegram import Bot

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r') as f:
    config = json.load(f)

def log_message(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_entry = f"{timestamp} - SSH_MONITOR - {message}"
    print(log_entry)
    
    # –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ–±—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª –±–æ—Ç–∞
    try:
        with open(config['log_file'], 'a') as log_file:
            log_file.write(log_entry + '\n')
    except Exception as e:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥

def send_telegram_message(message):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç"""
    try:
        bot = Bot(token=config['telegram_token'])
        bot.send_message(chat_id=config['owner_chat_id'], text=message, parse_mode='HTML')
        return True
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def get_geo_info(ip):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ IP —á–µ—Ä–µ–∑ ip-api.com"""
    try:
        url = f"http://ip-api.com/json/{ip}?fields=status,message,country,countryCode,region,regionName,city,zip,lat,lon,timezone,isp,org,as,query"
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        
        if data.get('status') == 'success':
            country = data.get('country', 'N/A')
            region = data.get('regionName', 'N/A')
            city = data.get('city', 'N/A')
            isp = data.get('isp', 'N/A')
            geo_info = f"–°—Ç—Ä–∞–Ω–∞: {country}, –†–µ–≥–∏–æ–Ω: {region}, –ì–æ—Ä–æ–¥: {city}, ISP: {isp}"
            return geo_info
        else:
            message = data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API')
            log_message(f"API ip-api.com –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –¥–ª—è IP {ip}: {message}")
            return f"–ì–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ({message})"
            
    except requests.exceptions.Timeout:
        log_message(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è IP {ip}")
        return "–ì–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Ç–∞–π–º–∞—É—Ç)"
    except requests.exceptions.RequestException as e:
        log_message(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è IP {ip}: {e}")
        return "–ì–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏)"
    except json.JSONDecodeError:
        log_message(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç API –¥–ª—è IP {ip}")
        return "–ì–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö)"
    except Exception as e:
        log_message(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è IP {ip}: {e}")
        return "–ì–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

def parse_ssh_log_line(line):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ SSH –ª–æ–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏"""
    
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π
    
    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (ISO 8601) - Accepted
    accepted_pattern_new = r'(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})\.\d+\+\d{2}:\d{2}.*sshd.*Accepted (?P<auth_type>\w+) for (?P<user>\w+) from (?P<ip>\d+\.\d+\.\d+\.\d+) port (?P<port>\d+)'
    
    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (ISO 8601) - Failed
    failed_pattern_new = r'(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})\.\d+\+\d{2}:\d{2}.*sshd.*Failed (?P<auth_type>\w+) for (?P<user>\w+) from (?P<ip>\d+\.\d+\.\d+\.\d+) port (?P<port>\d+)'
    
    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (ISO 8601) - Invalid user
    invalid_user_pattern_new = r'(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})\.\d+\+\d{2}:\d{2}.*sshd.*Invalid user (?P<user>\w+) from (?P<ip>\d+\.\d+\.\d+\.\d+) port (?P<port>\d+)'
    
    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (MMM DD HH:MM:SS) - Accepted
    accepted_pattern_old = r'(?P<timestamp>\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*sshd.*Accepted (?P<auth_type>\w+) for (?P<user>\w+) from (?P<ip>\d+\.\d+\.\d+\.\d+) port (?P<port>\d+)'
    
    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (MMM DD HH:MM:SS) - Failed
    failed_pattern_old = r'(?P<timestamp>\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*sshd.*Failed (?P<auth_type>\w+) for (?P<user>\w+) from (?P<ip>\d+\.\d+\.\d+\.\d+) port (?P<port>\d+)'
    
    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (MMM DD HH:MM:SS) - Invalid user
    invalid_user_pattern_old = r'(?P<timestamp>\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}).*sshd.*Invalid user (?P<user>\w+) from (?P<ip>\d+\.\d+\.\d+\.\d+) port (?P<port>\d+)'

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for pattern, type_str in [
        (accepted_pattern_new, 'success'), 
        (failed_pattern_new, 'failed'), 
        (invalid_user_pattern_new, 'failed'),
        (accepted_pattern_old, 'success'), 
        (failed_pattern_old, 'failed'), 
        (invalid_user_pattern_old, 'failed')
    ]:
        match = re.search(pattern, line)
        if match:
            data = match.groupdict()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            try:
                if 'T' in data['timestamp']:
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: 2025-09-17T10:22:45 -> 2025-09-17 10:22:45
                    dt_obj = datetime.fromisoformat(data['timestamp'])
                    formatted_timestamp = dt_obj.strftime('%Y-%m-%d %H:%M:%S')
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: Sep 17 10:10:38 -> 2025-09-17 10:10:38
                    current_year = datetime.now().year
                    full_timestamp_str = f"{current_year} {data['timestamp']}"
                    dt_obj = datetime.strptime(full_timestamp_str, '%Y %b %d %H:%M:%S')
                    formatted_timestamp = dt_obj.strftime('%Y-%m-%d %H:%M:%S')
                
                data['timestamp'] = formatted_timestamp
            except Exception as e:
                log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}. –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å.")
                
            data['type'] = type_str
            return data
            
    return None

def monitor_ssh_logs():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SSH –ª–æ–≥–æ–≤"""
    log_message("SSH –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –ª–æ–≥–µ
    try:
        with open(config['ssh_log_file'], 'r') as f:
            f.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            last_position = f.tell()
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SSH –ª–æ–≥–∞: {e}")
        return

    while True:
        try:
            with open(config['ssh_log_file'], 'r') as f:
                f.seek(last_position)
                new_lines = f.readlines()
                last_position = f.tell()

            for line in new_lines:
                parsed = parse_ssh_log_line(line.strip())
                if parsed:
                    if parsed['type'] == 'success':
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        message = f"""üîê <b>SSH –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>

<b>–í—Ä–µ–º—è:</b> {parsed['timestamp']}
<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {parsed['user']}
<b>IP –∞–¥—Ä–µ—Å:</b> {parsed['ip']}
<b>–ü–æ—Ä—Ç:</b> {parsed['port']} (–ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞)
<b>–¢–∏–ø –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</b> {parsed['auth_type']}
<b>–ì–µ–æ–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {get_geo_info(parsed['ip'])}"""
                        
                        send_telegram_message(message)
                        log_message(f"SSH –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {parsed['user']} —Å {parsed['ip']}")

                    elif parsed['type'] == 'failed':
                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
                        log_message(f"SSH –Ω–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: {parsed['user']} —Å {parsed['ip']}")

            time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

        except Exception as e:
            log_message(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SSH: {e}")
            time.sleep(5)

if __name__ == '__main__':
    monitor_ssh_logs()
