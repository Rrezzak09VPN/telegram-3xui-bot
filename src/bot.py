#!/usr/bin/env python3

import json
import logging
import threading
import time
import subprocess
import requests
import urllib3
import psutil
import os
import re
from urllib.parse import urlparse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, Filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r') as f:
    config = json.load(f)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=config['log_file'],
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
active_session = False
session_timer = None

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è /change_config ===
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞: None –∏–ª–∏ –∫–ª—é—á –∫–æ–Ω—Ñ–∏–≥–∞ ('access_duration_minutes', 'panel_url', 'panel_port')
awaiting_input_for = None
# ID —á–∞—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
change_config_initiator_chat_id = None

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è SSH ===
ssh_timer = None  # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è SSH
ssh_open_count = 0  # –°—á–µ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤ /open_ssh –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

def get_size(bytes, suffix="B"):
    """–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –±–∞–π—Ç—ã –≤ –Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    factor = 1024
    for unit in ["", "K", "M", "G", "T", "P"]:
        if bytes < factor:
            return f"{bytes:.2f}{unit}{suffix}"
        bytes /= factor
    return f"{bytes:.2f}Y{suffix}"

def get_uptime_string():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –∞–ø—Ç–∞–π–º–∞"""
    try:
        with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.readline().split()[0])
        
        days = int(uptime_seconds // 86400)
        hours = int((uptime_seconds % 86400) // 3600)
        minutes = int((uptime_seconds % 3600) // 60)
        
        if days > 0:
            return f"{days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"
        elif hours > 0:
            return f"{hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"
        else:
            return f"{minutes} –º–∏–Ω—É—Ç"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ø—Ç–∞–π–º–∞: {e}"

def log_message(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logger.info(message)
    print(message)

def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω –µ—Å–ª–∏ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å uptime
        with open('/proc/uptime', 'r') as f:
            uptime = f.read()
        return True
    except:
        return False

def check_xui_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ x-ui —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        result = subprocess.run(['systemctl', 'is-active', 'x-ui'],
                              capture_output=True, text=True, timeout=10)
        return result.stdout.strip() == 'active'
    except:
        return False

def open_panel_port(port):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ –ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ UFW"""
    try:
        subprocess.run(['ufw', 'allow', str(port)], check=True, capture_output=True)
        log_message(f"–ü–æ—Ä—Ç {port} (–ø–∞–Ω–µ–ª—å) –æ—Ç–∫—Ä—ã—Ç")
        return True
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ {port} (–ø–∞–Ω–µ–ª—å): {e}")
        return False

def close_panel_port(port):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞ –ø–∞–Ω–µ–ª–∏ —á–µ—Ä–µ–∑ UFW"""
    try:
        subprocess.run(['ufw', 'deny', str(port)], check=True, capture_output=True)
        log_message(f"–ü–æ—Ä—Ç {port} (–ø–∞–Ω–µ–ª—å) –∑–∞–∫—Ä—ã—Ç")
        return True
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ {port} (–ø–∞–Ω–µ–ª—å): {e}")
        return False

def open_ssh_port():
    """–û—Ç–∫—Ä—ã—Ç–∏–µ SSH –ø–æ—Ä—Ç–∞ (22) —á–µ—Ä–µ–∑ UFW"""
    try:
        subprocess.run(['ufw', 'allow', '22'], check=True, capture_output=True)
        log_message("SSH –ø–æ—Ä—Ç (22) –æ—Ç–∫—Ä—ã—Ç")
        return True
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SSH –ø–æ—Ä—Ç–∞ (22): {e}")
        return False

def close_ssh_port():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ SSH –ø–æ—Ä—Ç–∞ (22) —á–µ—Ä–µ–∑ UFW"""
    try:
        subprocess.run(['ufw', 'deny', '22'], check=True, capture_output=True)
        log_message("SSH –ø–æ—Ä—Ç (22) –∑–∞–∫—Ä—ã—Ç")
        return True
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è SSH –ø–æ—Ä—Ç–∞ (22): {e}")
        return False

def end_session(bot):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–∞–Ω–µ–ª–∏"""
    global active_session
    close_panel_port(config['panel_port'])
    active_session = False
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    try:
        bot.send_message(
            chat_id=config['owner_chat_id'],
            text="‚ö†Ô∏è –°–µ—Å—Å–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç."
        )
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –ø–∞–Ω–µ–ª–∏: {e}")

def end_ssh_session(bot):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è SSH —Å–µ—Å—Å–∏–∏ (–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Ä—Ç–∞)"""
    global ssh_timer, ssh_open_count
    if close_ssh_port():
        try:
            bot.send_message(
                chat_id=config['owner_chat_id'],
                text="üîí SSH –ø–æ—Ä—Ç (22) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏."
            )
        except Exception as e:
            log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ SSH –ø–æ—Ä—Ç–∞: {e}")
    else:
        log_message("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å SSH –ø–æ—Ä—Ç (22)")
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è SSH
    ssh_timer = None
    ssh_open_count = 0

def set_bot_commands(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞ (–≤—Å–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–≤—Å–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ!)
        commands = [
            ("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            ("help", "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
            ("getlink", "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–Ω–µ–ª—å"),
            ("offlink", "–ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏"),
            ("status", "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤"),
            ("change_config", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"),
            ("open_ssh", "–û—Ç–∫—Ä—ã—Ç—å SSH –ø–æ—Ä—Ç (22)"),
            ("close_ssh", "–ó–∞–∫—Ä—ã—Ç—å SSH –ø–æ—Ä—Ç (22)")
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å Telegram API
        result = bot.set_my_commands(commands)
        if result:
            log_message("‚úÖ –ú–µ–Ω—é –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –±–æ—Ç–∞ (set_my_commands –≤–µ—Ä–Ω—É–ª False).")
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–µ–Ω—é –±–æ—Ç–∞: {e}")

# ==================== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø /change_config ====================

def validate_url(url):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL –ø–∞–Ω–µ–ª–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ—Ä—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, port, error_message)
    """
    try:
        parsed = urlparse(url)
        if not parsed.scheme or not parsed.netloc:
            return False, None, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –î–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"
        
        if parsed.scheme not in ['http', 'https']:
            return False, None, "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Ä—Ç –≤ URL
        if ':' in parsed.netloc:
            host, port_str = parsed.netloc.rsplit(':', 1)
            try:
                port = int(port_str)
                if not (1 <= port <= 65535):
                    return False, None, "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535"
                return True, port, None
            except ValueError:
                return False, None, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ –≤ URL"
        else:
            # –ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            port = 80 if parsed.scheme == 'http' else 443
            return True, port, None
            
    except Exception as e:
        return False, None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ URL: {e}"

def validate_port(port_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, port, error_message)
    """
    try:
        port = int(port_str)
        if not (1 <= port <= 65535):
            return False, None, "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535"
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–æ–ø–∞—Å–Ω—ã–µ" –ø–æ—Ä—Ç—ã
        dangerous_ports = [22, 443]
        if port in dangerous_ports:
            return False, None, f"–ü–æ—Ä—Ç {port} –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫ –ø–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏."
            
        if port == config['panel_port']:
            return False, None, "–ù–æ–≤—ã–π –ø–æ—Ä—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç."
        return True, port, None
    except ValueError:
        return False, None, "–ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"

def validate_duration(duration_str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, minutes, error_message)
    """
    try:
        minutes = int(duration_str)
        if minutes <= 0:
            return False, None, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
        if minutes > 1440: # 24 —á–∞—Å–∞
            return False, None, "–í—Ä–µ–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)"
        return True, minutes, None
    except ValueError:
        return False, None, "–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–≤ –º–∏–Ω—É—Ç–∞—Ö)"

def update_config_file(key, new_value):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ config.json
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
        with open('config.json', 'r') as f:
            current_config = json.load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        old_value = current_config.get(key)
        current_config[key] = new_value
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        with open('config.json', 'w') as f:
            json.dump(current_config, f, indent=4)
            
        log_message(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: {key} –∏–∑–º–µ–Ω–µ–Ω —Å '{old_value}' –Ω–∞ '{new_value}'")
        return True
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}"
        log_message(error_msg)
        return False

def apply_port_change(old_port, new_port):
    """
    –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç, –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç (ALLOW).
    –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–æ—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç (–∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å ALLOW)
        result = subprocess.run(['ufw', 'status'], capture_output=True, text=True, timeout=10)
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "14698 ALLOW Anywhere" –∏–ª–∏ "14698/tcp ALLOW Anywhere"
        # –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, —á–µ–º –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —á–∏—Å–ª–∞ –≤ –≤—ã–≤–æ–¥–µ
        pattern = re.compile(rf'^\s*{old_port}(/tcp)?\s+ALLOW\s+', re.MULTILINE)
        
        if pattern.search(result.stdout):
            # –ü–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç (ALLOW), –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            if close_panel_port(old_port):
                log_message(f"‚úÖ –°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç {old_port} –∑–∞–∫—Ä—ã—Ç")
                return True
            else:
                log_message(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç {old_port}")
                return False
        else:
            log_message(f"‚ÑπÔ∏è –°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç {old_port} –Ω–µ –±—ã–ª –æ—Ç–∫—Ä—ã—Ç (ALLOW), –∑–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ")
            return True
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ—Ä—Ç–∞: {e}")
        return False

def change_config_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /change_config"""
    if update.effective_chat.id != config['owner_chat_id']:
        if update.message:
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    keyboard = [
        [InlineKeyboardButton("‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞", callback_data='change_duration')],
        [InlineKeyboardButton("üîó –ò–∑–º–µ–Ω–∏—Ç—å URL –ø–∞–Ω–µ–ª–∏", callback_data='change_url')],
        [InlineKeyboardButton("üö™ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏", callback_data='change_port')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = """üîß <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:

‚è±Ô∏è <b>–í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞</b> - –ö–∞–∫ –¥–æ–ª–≥–æ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞
üîó <b>URL –ø–∞–Ω–µ–ª–∏</b> - –ê–¥—Ä–µ—Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ 3X-UI
üö™ <b>–ü–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏</b> - –ü–æ—Ä—Ç, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ URL –∏–ª–∏ –ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç."""

    if update.message:
        update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')
    elif update.callback_query:
        update.callback_query.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')

def change_config_button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é /change_config"""
    global awaiting_input_for, change_config_initiator_chat_id
    
    if not update.callback_query:
        return

    query = update.callback_query
    query.answer()

    if update.effective_chat.id != config['owner_chat_id']:
        query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" (change_config)
    if query.data == 'change_config':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        change_config_command(update, context)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ
        awaiting_input_for = None
        change_config_initiator_chat_id = None
        return
        
    if query.data == 'change_duration':
        awaiting_input_for = 'access_duration_minutes'
        change_config_initiator_chat_id = update.effective_chat.id
        query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ç–µ–∫—É—â–µ–µ: {config['access_duration_minutes']} –º–∏–Ω—É—Ç):")
        
    elif query.data == 'change_url':
        awaiting_input_for = 'panel_url'
        change_config_initiator_chat_id = update.effective_chat.id
        query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π URL –ø–∞–Ω–µ–ª–∏ (—Ç–µ–∫—É—â–∏–π: {config['panel_url']}):")
        
    elif query.data == 'change_port':
        awaiting_input_for = 'panel_port'
        change_config_initiator_chat_id = update.effective_chat.id
        query.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏ (—Ç–µ–∫—É—â–∏–π: {config['panel_port']}):")
        
    elif query.data == 'back_to_main':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        start_command(update, context)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        awaiting_input_for = None
        change_config_initiator_chat_id = None

def handle_text_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è /change_config"""
    global awaiting_input_for, change_config_initiator_chat_id, config
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥
    if awaiting_input_for is None or change_config_initiator_chat_id != update.effective_chat.id:
        # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        return

    user_input = update.message.text.strip()
    
    try:
        if awaiting_input_for == 'access_duration_minutes':
            is_valid, new_value, error_msg = validate_duration(user_input)
            if is_valid:
                if update_config_file('access_duration_minutes', new_value):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤ –ø–∞–º—è—Ç–∏
                    config['access_duration_minutes'] = new_value
                    update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_value} –º–∏–Ω—É—Ç.")
                else:
                    update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            else:
                update.message.reply_text(f"‚ùå {error_msg}")
                
        elif awaiting_input_for == 'panel_url':
            is_valid, extracted_port, error_msg = validate_url(user_input)
            if is_valid:
                old_port = config['panel_port']
                old_url = config['panel_url']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º URL
                if update_config_file('panel_url', user_input):
                    config['panel_url'] = user_input
                    
                    # –ï—Å–ª–∏ –ø–æ—Ä—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π
                    if extracted_port != old_port:
                        if apply_port_change(old_port, extracted_port):
                            if update_config_file('panel_port', extracted_port):
                                config['panel_port'] = extracted_port
                                update.message.reply_text(
                                    f"‚úÖ URL –ø–∞–Ω–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å:\n<code>{old_url}</code>\n–Ω–∞:\n<code>{user_input}</code>\n\n"
                                    f"–ü–æ—Ä—Ç –∏–∑–º–µ–Ω–µ–Ω —Å {old_port} –Ω–∞ {extracted_port}. –°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç.",
                                    parse_mode='HTML'
                                )
                            else:
                                update.message.reply_text("‚ùå URL –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
                        else:
                            update.message.reply_text("‚ùå URL –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç.")
                    else:
                        update.message.reply_text(
                            f"‚úÖ URL –ø–∞–Ω–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å:\n<code>{old_url}</code>\n–Ω–∞:\n<code>{user_input}</code>",
                            parse_mode='HTML'
                        )
                else:
                    update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ URL.")
            else:
                update.message.reply_text(f"‚ùå {error_msg}")
                
        elif awaiting_input_for == 'panel_port':
            is_valid, new_port, error_msg = validate_port(user_input)
            if is_valid:
                old_port = config['panel_port']
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç
                if apply_port_change(old_port, new_port):
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ
                    if update_config_file('panel_port', new_port):
                        config['panel_port'] = new_port
                        # –û–±–Ω–æ–≤–ª—è–µ–º URL, –µ—Å–ª–∏ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ä—Ç
                        old_url = config['panel_url']
                        try:
                            parsed = urlparse(old_url)
                            if ':' in parsed.netloc:
                                host = parsed.netloc.split(':')[0]
                                new_netloc = f"{host}:{new_port}"
                                new_url = old_url.replace(parsed.netloc, new_netloc)
                                if update_config_file('panel_url', new_url):
                                    config['panel_url'] = new_url
                                    update.message.reply_text(
                                        f"‚úÖ –ü–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å {old_port} –Ω–∞ {new_port}.\n"
                                        f"–°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç.\n"
                                        f"URL –æ–±–Ω–æ–≤–ª–µ–Ω —Å:\n<code>{old_url}</code>\n–Ω–∞:\n<code>{new_url}</code>",
                                        parse_mode='HTML'
                                    )
                                else:
                                    update.message.reply_text(
                                        f"‚úÖ –ü–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å {old_port} –Ω–∞ {new_port}.\n"
                                        f"–°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç.\n"
                                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL –≤ –∫–æ–Ω—Ñ–∏–≥–µ."
                                    )
                            else:
                                update.message.reply_text(
                                    f"‚úÖ –ü–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å {old_port} –Ω–∞ {new_port}.\n"
                                    f"–°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç."
                                )
                        except Exception as e:
                            update.message.reply_text(
                                f"‚úÖ –ü–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω —Å {old_port} –Ω–∞ {new_port}.\n"
                                f"–°—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç.\n"
                                f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ URL: {e}"
                            )
                    else:
                        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—Ç–∞.")
                else:
                    update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—Ç.")
            else:
                update.message.reply_text(f"‚ùå {error_msg}")
    except Exception as e:
        error_msg = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞: {e}"
        log_message(error_msg)
        update.message.reply_text(error_msg)
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        awaiting_input_for = None
        change_config_initiator_chat_id = None

# ==================== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø SSH ====================

def open_ssh_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /open_ssh"""
    global ssh_timer, ssh_open_count
    
    if update.effective_chat.id != config['owner_chat_id']:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º SSH –ø–æ—Ä—Ç
    if open_ssh_port():
        ssh_open_count += 1
        total_minutes = ssh_open_count * 60  # 60 –º–∏–Ω—É—Ç –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–∑–æ–≤
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if ssh_timer and ssh_timer.is_alive():
            ssh_timer.cancel()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        ssh_timer = threading.Timer(
            total_minutes * 60,  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
            lambda: end_ssh_session(context.bot)
        )
        ssh_timer.start()
        
        update.message.reply_text(
            f"‚úÖ SSH –ø–æ—Ä—Ç (22) –æ—Ç–∫—Ä—ã—Ç!\n"
            f"–ë—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ {total_minutes} –º–∏–Ω—É—Ç ({ssh_open_count} —á–∞—Å(-–∞/-–æ–≤)).\n"
            f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ /open_ssh —É–≤–µ–ª–∏—á–∏—Ç –≤—Ä–µ–º—è –Ω–∞ 1 —á–∞—Å."
        )
    else:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SSH –ø–æ—Ä—Ç–∞ (22).")

def close_ssh_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /close_ssh"""
    global ssh_timer, ssh_open_count
    
    if update.effective_chat.id != config['owner_chat_id']:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if ssh_timer and ssh_timer.is_alive():
        ssh_timer.cancel()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º SSH –ø–æ—Ä—Ç
    if close_ssh_port():
        ssh_open_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        update.message.reply_text("‚úÖ SSH –ø–æ—Ä—Ç (22) –∑–∞–∫—Ä—ã—Ç.")
    else:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è SSH –ø–æ—Ä—Ç–∞ (22).")

# ==================== –ö–û–ù–ï–¶ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ====================

def start_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    if update.effective_chat.id != config['owner_chat_id']:
        if update.message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    keyboard = [
        [InlineKeyboardButton("üîì –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='get_link')],
        [InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø", callback_data='close_link')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data='status')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞", callback_data='change_config')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    server_status = "üü¢ –û–Ω–ª–∞–π–Ω" if check_server_status() else "üî¥ –û—Ñ–ª–∞–π–Ω"
    xui_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if check_xui_status() else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    message = f"""ü§ñ <b>Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 3X-UI</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–º–æ—â—å
/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
/getlink - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–Ω–µ–ª—å
/offlink - –ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏
/change_config - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/open_ssh - –û—Ç–∫—Ä—ã—Ç—å SSH –ø–æ—Ä—Ç
/close_ssh - –ó–∞–∫—Ä—ã—Ç—å SSH –ø–æ—Ä—Ç

<b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b>
üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {server_status}
üéõÔ∏è 3X-UI: {xui_status}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–∞–Ω–µ–ª–∏:"""

    update.message.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')

def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    if update.effective_chat.id != config['owner_chat_id']:
        if update.message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    message = """ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∏ 3X-UI
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö
‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–ø–∞–Ω–µ–ª–∏

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤
/getlink - –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–Ω–µ–ª—å
/offlink - –ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏
/change_config - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
/open_ssh - –û—Ç–∫—Ä—ã—Ç—å SSH –ø–æ—Ä—Ç (22) –Ω–∞ 1 —á–∞—Å (–Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è)
/close_ssh - –ó–∞–∫—Ä—ã—Ç—å SSH –ø–æ—Ä—Ç (22)

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
–î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ 30 –º–∏–Ω—É—Ç –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è."""

    update.message.reply_text(message, parse_mode='HTML')

def status_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
    if update.effective_chat.id != config['owner_chat_id']:
        if update.message:
            update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    try:
        # 1. –ò–º—è —Ö–æ—Å—Ç–∞
        hostname = subprocess.run(['hostname'], capture_output=True, text=True, timeout=5).stdout.strip()
        
        # 2. –í–µ—Ä—Å–∏—è –û–°
        os_info_result = subprocess.run(['lsb_release', '-d'], capture_output=True, text=True, timeout=5)
        os_version = os_info_result.stdout.split(":")[1].strip() if os_info_result.returncode == 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # 3. IP –∞–¥—Ä–µ—Å
        ip_info_result = subprocess.run(['hostname', '-I'], capture_output=True, text=True, timeout=5)
        ip_address = ip_info_result.stdout.strip().split()[0] if ip_info_result.returncode == 0 and ip_info_result.stdout.strip() else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
        
        # 4. –ê–ø—Ç–∞–π–º
        uptime_str = get_uptime_string()
        
        # 5. –ó–∞–≥—Ä—É–∑–∫–∞ CPU (–º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è)
        cpu_percent = psutil.cpu_percent(interval=1) # 1-—Å–µ–∫—É–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
        
        # 6. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –û–ó–£
        svmem = psutil.virtual_memory()
        ram_used = get_size(svmem.used)
        ram_total = get_size(svmem.total)
        ram_percent = svmem.percent
        
        # 7. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
        disk_usage = psutil.disk_usage('/')
        disk_used = get_size(disk_usage.used)
        disk_total = get_size(disk_usage.total)
        disk_percent = disk_usage.percent
        
        # 8. Load Average
        load_avg = os.getloadavg()
        load_avg_str = f"{load_avg[0]:.2f}, {load_avg[1]:.2f}, {load_avg[2]:.2f}"
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è Load Average (–¥–ª—è 1 —è–¥—Ä–∞)
        load_comment = ""
        if load_avg[0] > 1.0:
            load_comment = " (–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞!)"
        elif load_avg[0] > 0.7:
            load_comment = " (–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)"
        else:
            load_comment = " (–ù–æ—Ä–º–∞–ª—å–Ω–æ)"

        # 9. –°—Ç–∞—Ç—É—Å 3X-UI
        xui_status_result = subprocess.run(['systemctl', 'is-active', 'x-ui'], capture_output=True, text=True, timeout=10)
        xui_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if xui_status_result.stdout.strip() == 'active' else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"

        message = f"""üñ•Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</b> (<code>{hostname}</code>)
üöÄ <b>–û–°:</b> {os_version}
üåê <b>IPv4:</b> {ip_address}
‚è±Ô∏è <b>–ê–ø—Ç–∞–π–º:</b> {uptime_str}
üìà <b>–ó–∞–≥—Ä—É–∑–∫–∞ CPU:</b> {cpu_percent}%
üíæ <b>–û–ó–£:</b> {ram_used} / {ram_total} ({ram_percent:.1f}%)
üìÇ <b>–î–∏—Å–∫ (/):</b> {disk_used} / {disk_total} ({disk_percent:.1f}%)
üìä <b>–ù–∞–≥—Ä—É–∑–∫–∞ (1/5/15 –º–∏–Ω):</b> {load_avg_str}{load_comment}
üéõÔ∏è <b>3X-UI:</b> <code>{xui_status}</code>"""

        if update.message:
            update.message.reply_text(message, parse_mode='HTML')
        elif update.callback_query:
            update.callback_query.message.reply_text(message, parse_mode='HTML')
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}"
        log_message(error_msg)
        if update.message:
            update.message.reply_text(error_msg)
        elif update.callback_query:
            update.callback_query.message.reply_text(error_msg)

def get_link_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /getlink"""
    global active_session, session_timer

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ callback
    message_obj = update.message if hasattr(update, 'message') and update.message else None
    if not message_obj and hasattr(update, 'callback_query') and update.callback_query:
        message_obj = update.callback_query.message

    if update.effective_chat.id != config['owner_chat_id']:
        if message_obj:
            message_obj.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if active_session:
        if message_obj:
            message_obj.reply_text("‚ö†Ô∏è –°–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.")
        return

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
    if open_panel_port(config['panel_port']):
        active_session = True
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        session_timer = threading.Timer(
            config['access_duration_minutes'] * 60,
            lambda: end_session(context.bot)
        )
        session_timer.start()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        message_text = f"""‚úÖ <b>–î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –æ—Ç–∫—Ä—ã—Ç!</b>

üîó –°—Å—ã–ª–∫–∞: {config['panel_url']}

‚è∞ –î–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ {config['access_duration_minutes']} –º–∏–Ω—É—Ç."""

        if message_obj:
            message_obj.reply_text(message_text, parse_mode='HTML')
    else:
        if message_obj:
            message_obj.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏.")

def off_link_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /offlink"""
    global active_session, session_timer

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ callback
    message_obj = update.message if hasattr(update, 'message') and update.message else None
    if not message_obj and hasattr(update, 'callback_query') and update.callback_query:
        message_obj = update.callback_query.message

    if update.effective_chat.id != config['owner_chat_id']:
        if message_obj:
            message_obj.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return

    if not active_session:
        if message_obj:
            message_obj.reply_text("‚ÑπÔ∏è –ü–æ—Ä—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç. –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        return

    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if session_timer and session_timer.is_alive():
        session_timer.cancel()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
    if close_panel_port(config['panel_port']):
        active_session = False
        if message_obj:
            message_obj.reply_text("‚úÖ –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –∑–∞–∫—Ä—ã—Ç. –ü–æ—Ä—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        log_message("–ü–æ—Ä—Ç –ø–∞–Ω–µ–ª–∏ –∑–∞–∫—Ä—ã—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        if message_obj:
            message_obj.reply_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏.")

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    if not update.callback_query:
        return

    query = update.callback_query
    query.answer()

    if query.data == 'get_link':
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤—ã–∑–æ–≤–∞ get_link_command
        get_link_command(update, context)
    elif query.data == 'close_link':
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤—ã–∑–æ–≤–∞ off_link_command
        off_link_command(update, context)
    elif query.data == 'status':
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π update –¥–ª—è –≤—ã–∑–æ–≤–∞ status_command
        status_command(update, context)
    elif query.data in ['change_config', 'change_duration', 'change_url', 'change_port', 'back_to_main']:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é /change_config
        change_config_button_handler(update, context)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º updater –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        updater = Updater(
            config['telegram_token'],
            use_context=True,
            workers=4
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –±–æ—Ç–∞
        set_bot_commands(updater.bot)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        updater.dispatcher.add_handler(CommandHandler("start", start_command))
        updater.dispatcher.add_handler(CommandHandler("help", help_command))
        updater.dispatcher.add_handler(CommandHandler("status", status_command))
        updater.dispatcher.add_handler(CommandHandler("getlink", get_link_command)) # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        updater.dispatcher.add_handler(CommandHandler("offlink", off_link_command)) # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        updater.dispatcher.add_handler(CommandHandler("change_config", change_config_command)) # <-- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        updater.dispatcher.add_handler(CommandHandler("open_ssh", open_ssh_command)) # <-- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        updater.dispatcher.add_handler(CommandHandler("close_ssh", close_ssh_command)) # <-- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback –∫–Ω–æ–ø–æ–∫
        updater.dispatcher.add_handler(CallbackQueryHandler(button_handler))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è /change_config)
        updater.dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text_input))

        log_message("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        updater.start_polling()
        updater.idle()

    except Exception as e:
        log_message(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
