#!/usr/bin/env python3
import json
import subprocess
import time
import requests
import threading
import urllib3
import psutil
import os
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
from datetime import datetime
from telegram import Bot

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.json', 'r') as f:
    config = json.load(f)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
previous_server_status = None  # None = –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
previous_xui_status = None     # None = –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_FILE = '/var/lib/telegram-bot/state.json'

def log_message(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_entry = f"{timestamp} - SYSTEM_MONITOR - {message}"
    print(log_entry)
    with open(config['log_file'], 'a') as f:
        f.write(log_entry + '\n')

def load_state():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(STATE_FILE):
            with open(STATE_FILE, 'r') as f:
                return json.load(f)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è
            initial_state = {
                "last_status": {"server": True, "xui": True},
                "last_check": "2025-01-01 00:00:00",
                "last_uptime": 0
            }
            save_state(initial_state)
            return initial_state
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return {
            "last_status": {"server": True, "xui": True},
            "last_check": "2025-01-01 00:00:00",
            "last_uptime": 0
        }

def save_state(state):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        os.makedirs(os.path.dirname(STATE_FILE), exist_ok=True)
        with open(STATE_FILE, 'w') as f:
            json.dump(state, f, indent=2)
        log_message(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {STATE_FILE}")
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

def get_system_uptime():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ uptime —Å–∏—Å—Ç–µ–º—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
    try:
        with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.readline().split()[0])
        return uptime_seconds
    except:
        return 0

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –≤–ª–∞–¥–µ–ª—å—Ü—É"""
    try:
        bot = Bot(token=config['telegram_token'])
        bot.send_message(chat_id=config['owner_chat_id'], text=message, parse_mode='HTML')
        return True
    except Exception as e:
        log_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω –µ—Å–ª–∏ –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å uptime
        with open('/proc/uptime', 'r') as f:
            uptime = f.read()
        return True
    except:
        return False

def check_xui_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ x-ui —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        result = subprocess.run(['systemctl', 'is-active', 'x-ui'], 
                              capture_output=True, text=True, timeout=10)
        return result.stdout.strip() == 'active'
    except:
        return False

def check_initial_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global previous_server_status, previous_xui_status
    
    log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    state = load_state()
    log_message(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π uptime
    current_uptime = get_system_uptime()
    last_uptime = state.get("last_uptime", 0)
    
    log_message(f"–¢–µ–∫—É—â–∏–π uptime: {current_uptime}, –ø–æ—Å–ª–µ–¥–Ω–∏–π uptime: {last_uptime}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (—Ç–µ–∫—É—â–∏–π uptime –º–µ–Ω—å—à–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ã–ª –±–æ–ª—å—à–æ–π)
    if current_uptime < last_uptime and last_uptime > 300:  # –ë–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç
        message = "üîÑ <b>–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω</b>\n–°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏!"
        send_telegram_message(message)
        log_message("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ uptime")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    current_server_status = check_server_status()
    previous_server_status = current_server_status
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º x-ui
    current_xui_status = check_xui_status()
    previous_xui_status = current_xui_status
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    server_status_text = "üü¢ –û–Ω–ª–∞–π–Ω" if current_server_status else "üî¥ –û—Ñ–ª–∞–π–Ω"
    xui_status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if current_xui_status else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    message = f"""üîÑ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω</b>

<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b>
üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: {server_status_text}
üéõÔ∏è 3X-UI: {xui_status_text}"""
    
    send_telegram_message(message)
    log_message(f"–ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: –°–µ—Ä–≤–µ—Ä={server_status_text}, X-UI={xui_status_text}")

def monitor_system():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
    global previous_server_status, previous_xui_status
    
    log_message("–°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    check_initial_status()
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            current_server_status = check_server_status()
            if previous_server_status is not None and current_server_status != previous_server_status:
                if current_server_status:
                    message = "‚úÖ <b>–°–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n–°–µ—Ä–≤–µ—Ä —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω!"
                    send_telegram_message(message)
                    log_message("–°–µ—Ä–≤–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    message = "‚ùå <b>–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n–ü–æ—Ç–µ—Ä—è–Ω–∞ —Å–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º!"
                    send_telegram_message(message)
                    log_message("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            previous_server_status = current_server_status
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å x-ui
            current_xui_status = check_xui_status()
            if previous_xui_status is not None and current_xui_status != previous_xui_status:
                if current_xui_status:
                    message = "‚úÖ <b>3X-UI –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n–°–µ—Ä–≤–∏—Å 3X-UI —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!"
                    send_telegram_message(message)
                    log_message("3X-UI –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    message = "‚ùå <b>3X-UI —É–ø–∞–ª</b>\n–°–µ—Ä–≤–∏—Å 3X-UI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
                    send_telegram_message(message)
                    log_message("3X-UI —É–ø–∞–ª")
            previous_xui_status = current_xui_status
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å uptime
            state = {
                "last_status": {
                    "server": current_server_status,
                    "xui": current_xui_status
                },
                "last_check": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                "last_uptime": get_system_uptime()
            }
            save_state(state)
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            time.sleep(config['check_interval_seconds'])
            
        except Exception as e:
            log_message(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            time.sleep(30)

if __name__ == '__main__':
    monitor_system()
